import math
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
import numpy as np
from scipy.optimize import fsolve


def myFunction(z, alpha):
    phi = z[0]
    mu = z[1]
    F = np.empty((2))
    F[0] = np.tan(alpha) - np.sqrt(2*(1-phi)/phi)
    F[1] = mu - phi*np.sqrt(phi/(2-phi))
    return F

zGuess = np.array([0.5,0.5])
alpha = 60*np.pi/180
z = fsolve(myFunction,zGuess, args=(alpha,))
print(z)
phi, mu = z

def funA(A, phi, mu):
    return mu - 1/np.sqrt(A**2/(1-phi)+1/phi**2)
AGuess = 0.5
A = fsolve(funA, AGuess, args=(phi, mu,))
print(A)

def funPhi(phi, A):
    return A - (1-phi)*np.sqrt(2)/(phi*np.sqrt(phi))
phiGuess = 0.5
phi = fsolve(funPhi, phiGuess, args=(A,))
print(phi)

mu = phi*np.sqrt(phi)/np.sqrt(2-phi)
print(mu)

alpha_eq = 180/np.pi*np.arctan(np.sqrt(2*(1-phi)/phi))
print(alpha_eq)

print(180/np.pi*np.arctan(1))

def funcA(A, phi, mu):
    return A - (1-phi)*np.sqrt(2)/(phi*np.sqrt(phi)) 
AGuess = 0.5
print('ping')
phi_2 = 0.2
mu_2 = 0.4
A_2 = fsolve(funcA, AGuess, args=(phi_2, mu_2,))

k_m = 2.3
tau = 0.2/1000
deltap_1 = 4*10**5
deltap_2 = 4*10**5
rho_1 = 1100
rho_2 = 800
mu_1 = 0.443 #0.374
mu_2 = 0.064 #0.258
phi_1 = 0.64 #0.5826179
phi_2 = 0.2 #0.0991366
l_mix = np.sqrt(2)*tau*(((k_m*mu_2)/((k_m+1)*phi_2))*np.sqrt(deltap_2/rho_2) + (mu_1/((k_m+1)*phi_1))*np.sqrt(deltap_1/rho_1))
print(f'part 1:{(k_m*mu_2)/((k_m+1)*phi_2)*np.sqrt(deltap_2/rho_2)}')
print(f'part 2:{mu_1/((k_m+1)*phi_1)*np.sqrt(deltap_1/rho_1)}')
print(f'l_mix = {l_mix}')

